# Multi-stage Dockerfile for testing
FROM python:3.11-slim as base

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies including test dependencies
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir \
        pytest-cov==4.1.0 \
        pytest-xdist==3.3.1 \
        pytest-mock==3.12.0

# Copy application code
COPY app/ ./app/
COPY tests/ ./tests/
COPY pytest.ini ./pytest.ini

# Copy test environment file (optional)
COPY .env.test* ./
RUN if [ -f .env.test ]; then cp .env.test .env; else echo "APP_ENV=test" > .env; fi

# Create directories for test outputs
RUN mkdir -p /app/test-results /app/htmlcov

# Create non-root user for security
RUN adduser --disabled-password --gecos '' --shell /bin/bash testuser \
    && chown -R testuser:testuser /app
USER testuser

# Health check for test container
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import app.main; print('Test container healthy')" || exit 1

# Default command
CMD ["python", "-m", "pytest", "tests/", "-v"]